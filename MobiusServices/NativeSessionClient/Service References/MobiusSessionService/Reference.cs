//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mobius.NativeSessionClient.MobiusSessionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="Mobius.Services.Types.Internal")]
    [System.SerializableAttribute()]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerIPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNativeSessionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastFreshenDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<Mobius.Services.Types.SessionParameterName, string> SessionParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerIPAddress {
            get {
                return this.CallerIPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerIPAddressField, value) != true)) {
                    this.CallerIPAddressField = value;
                    this.RaisePropertyChanged("CallerIPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDT {
            get {
                return this.CreationDTField;
            }
            set {
                if ((this.CreationDTField.Equals(value) != true)) {
                    this.CreationDTField = value;
                    this.RaisePropertyChanged("CreationDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDT {
            get {
                return this.ExpirationDTField;
            }
            set {
                if ((this.ExpirationDTField.Equals(value) != true)) {
                    this.ExpirationDTField = value;
                    this.RaisePropertyChanged("ExpirationDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNativeSession {
            get {
                return this.IsNativeSessionField;
            }
            set {
                if ((this.IsNativeSessionField.Equals(value) != true)) {
                    this.IsNativeSessionField = value;
                    this.RaisePropertyChanged("IsNativeSession");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastFreshenDT {
            get {
                return this.LastFreshenDTField;
            }
            set {
                if ((this.LastFreshenDTField.Equals(value) != true)) {
                    this.LastFreshenDTField = value;
                    this.RaisePropertyChanged("LastFreshenDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<Mobius.Services.Types.SessionParameterName, string> SessionParameters {
            get {
                return this.SessionParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionParametersField, value) != true)) {
                    this.SessionParametersField = value;
                    this.RaisePropertyChanged("SessionParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://server/MobiusServices/v1.0", ConfigurationName="MobiusSessionService.IMobiusSessionService")]
    public interface IMobiusSessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentVe" +
            "rsionNumber", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentVe" +
            "rsionNumberResponse")]
        string GetCurrentVersionNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentUs" +
            "erId", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentUs" +
            "erIdResponse")]
        string GetCurrentUserId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentSe" +
            "ssionUserId", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentSe" +
            "ssionUserIdResponse")]
        string GetCurrentSessionUserId(Mobius.Services.Types.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/CreateSessio" +
            "n", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/CreateSessio" +
            "nResponse")]
        Mobius.Services.Types.Session CreateSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/CreateNative" +
            "Session", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/CreateNative" +
            "SessionResponse")]
        Mobius.Services.Types.Session CreateNativeSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/FreshenSessi" +
            "on", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/FreshenSessi" +
            "onResponse")]
        Mobius.Services.Types.Session FreshenSession(Mobius.Services.Types.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/IsSessionVal" +
            "id", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/IsSessionVal" +
            "idResponse")]
        bool IsSessionValid(Mobius.Services.Types.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/GetSessionIn" +
            "fo", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/GetSessionIn" +
            "foResponse")]
        Mobius.Services.Types.SessionInfo[] GetSessionInfo(Mobius.Services.Types.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentSe" +
            "ssionCount", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/GetCurrentSe" +
            "ssionCountResponse")]
        int GetCurrentSessionCount(Mobius.Services.Types.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/GetSessionIn" +
            "foForAllSessions", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/GetSessionIn" +
            "foForAllSessionsResponse")]
        System.Collections.Generic.Dictionary<Mobius.Services.Types.Session, Mobius.Services.Types.SessionInfo[]> GetSessionInfoForAllSessions(Mobius.Services.Types.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/SetSessionPa" +
            "rameter", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/SetSessionPa" +
            "rameterResponse")]
        bool SetSessionParameter(Mobius.Services.Types.Session session, Mobius.Services.Types.SessionParameterName parmName, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/DisposeSessi" +
            "on", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/DisposeSessi" +
            "onResponse")]
        void DisposeSession(Mobius.Services.Types.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://server/MobiusServices/v1.0/IMobiusSessionService/DisposeSessi" +
            "onById", ReplyAction="http://server/MobiusServices/v1.0/IMobiusSessionService/DisposeSessi" +
            "onByIdResponse")]
        void DisposeSessionById(Mobius.Services.Types.Session session, int sessionIdToDispose);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMobiusSessionServiceChannel : Mobius.NativeSessionClient.MobiusSessionService.IMobiusSessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MobiusSessionServiceClient : System.ServiceModel.ClientBase<Mobius.NativeSessionClient.MobiusSessionService.IMobiusSessionService>, Mobius.NativeSessionClient.MobiusSessionService.IMobiusSessionService {
        
        public MobiusSessionServiceClient() {
        }
        
        public MobiusSessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MobiusSessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobiusSessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobiusSessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetCurrentVersionNumber() {
            return base.Channel.GetCurrentVersionNumber();
        }
        
        public string GetCurrentUserId() {
            return base.Channel.GetCurrentUserId();
        }
        
        public string GetCurrentSessionUserId(Mobius.Services.Types.Session session) {
            return base.Channel.GetCurrentSessionUserId(session);
        }
        
        public Mobius.Services.Types.Session CreateSession() {
            return base.Channel.CreateSession();
        }
        
        public Mobius.Services.Types.Session CreateNativeSession() {
            return base.Channel.CreateNativeSession();
        }
        
        public Mobius.Services.Types.Session FreshenSession(Mobius.Services.Types.Session session) {
            return base.Channel.FreshenSession(session);
        }
        
        public bool IsSessionValid(Mobius.Services.Types.Session session) {
            return base.Channel.IsSessionValid(session);
        }
        
        public Mobius.Services.Types.SessionInfo[] GetSessionInfo(Mobius.Services.Types.Session session) {
            return base.Channel.GetSessionInfo(session);
        }
        
        public int GetCurrentSessionCount(Mobius.Services.Types.Session session) {
            return base.Channel.GetCurrentSessionCount(session);
        }
        
        public System.Collections.Generic.Dictionary<Mobius.Services.Types.Session, Mobius.Services.Types.SessionInfo[]> GetSessionInfoForAllSessions(Mobius.Services.Types.Session session) {
            return base.Channel.GetSessionInfoForAllSessions(session);
        }
        
        public bool SetSessionParameter(Mobius.Services.Types.Session session, Mobius.Services.Types.SessionParameterName parmName, string value) {
            return base.Channel.SetSessionParameter(session, parmName, value);
        }
        
        public void DisposeSession(Mobius.Services.Types.Session session) {
            base.Channel.DisposeSession(session);
        }
        
        public void DisposeSessionById(Mobius.Services.Types.Session session, int sessionIdToDispose) {
            base.Channel.DisposeSessionById(session, sessionIdToDispose);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Mobius.Services.Types.Internal", ConfigurationName="MobiusSessionService.IMobiusInternalSessionService")]
    public interface IMobiusInternalSessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Mobius.Services.Types.Internal/IMobiusInternalSessionService/RegisterSessionalSer" +
            "viceIpcEndpointAddress", ReplyAction="Mobius.Services.Types.Internal/IMobiusInternalSessionService/RegisterSessionalSer" +
            "viceIpcEndpointAddressResponse")]
        bool RegisterSessionalServiceIpcEndpointAddress(string ipcEndpointAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="Mobius.Services.Types.Internal/IMobiusInternalSessionService/ValidateSession", ReplyAction="Mobius.Services.Types.Internal/IMobiusInternalSessionService/ValidateSessionRespo" +
            "nse")]
        Mobius.NativeSessionClient.MobiusSessionService.Session ValidateSession(Mobius.Services.Types.Session session, string callerIPAddress);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMobiusInternalSessionServiceChannel : Mobius.NativeSessionClient.MobiusSessionService.IMobiusInternalSessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MobiusInternalSessionServiceClient : System.ServiceModel.ClientBase<Mobius.NativeSessionClient.MobiusSessionService.IMobiusInternalSessionService>, Mobius.NativeSessionClient.MobiusSessionService.IMobiusInternalSessionService {
        
        public MobiusInternalSessionServiceClient() {
        }
        
        public MobiusInternalSessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MobiusInternalSessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobiusInternalSessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobiusInternalSessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterSessionalServiceIpcEndpointAddress(string ipcEndpointAddress) {
            return base.Channel.RegisterSessionalServiceIpcEndpointAddress(ipcEndpointAddress);
        }
        
        public Mobius.NativeSessionClient.MobiusSessionService.Session ValidateSession(Mobius.Services.Types.Session session, string callerIPAddress) {
            return base.Channel.ValidateSession(session, callerIPAddress);
        }
    }
}
