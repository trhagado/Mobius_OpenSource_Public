using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Mobius.Helm
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0))")]
	public partial class HelmMonomerWebService
	{
		private string _baseUrl = "";
		private System.Net.Http.HttpClient _httpClient;
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public HelmMonomerWebService(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings();
				UpdateJsonSerializerSettings(settings);
				return settings;
			});
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <summary>Get all monomers sorted by type</summary>
		/// <returns>Monomers were successfully listed</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ShowMonomerListAsync(string polymertype, string monomertype, string filter, string filterField, int? limit, int? offset)
		{
			return ShowMonomerListAsync(polymertype, monomertype, filter, filterField, limit, offset, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get all monomers sorted by type</summary>
		/// <returns>Monomers were successfully listed</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task ShowMonomerListAsync(string polymertype, string monomertype, string filter, string filterField, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
		{
			if (polymertype == null)
				throw new System.ArgumentNullException("polymertype");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/monomer/{polymertype}?");
			urlBuilder_.Replace("{polymertype}", System.Uri.EscapeDataString(ConvertToString(polymertype, System.Globalization.CultureInfo.InvariantCulture)));
			if (monomertype != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("monomertype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(monomertype, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filter != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (filterField != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("filterField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (limit != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (offset != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Monomers can not be listed", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Insert new monomer or update monomer</summary>
		/// <param name="body">Monomer</param>
		/// <returns>Monomer successfully inserted/updated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task InsertOrUpdateMonomerAsync(string polymertype, string symbol, string body)
		{
			return InsertOrUpdateMonomerAsync(polymertype, symbol, body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Insert new monomer or update monomer</summary>
		/// <param name="body">Monomer</param>
		/// <returns>Monomer successfully inserted/updated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task InsertOrUpdateMonomerAsync(string polymertype, string symbol, string body, System.Threading.CancellationToken cancellationToken)
		{
			if (polymertype == null)
				throw new System.ArgumentNullException("polymertype");

			if (symbol == null)
				throw new System.ArgumentNullException("symbol");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/monomer/{polymertype}/{Symbol}");
			urlBuilder_.Replace("{polymertype}", System.Uri.EscapeDataString(ConvertToString(polymertype, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{Symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ == "409")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Show details of monomer</summary>
		/// <returns>Details successesfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> MonomerDetailAsync(string polymertype, string symbol)
		{
			return MonomerDetailAsync(polymertype, symbol, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Show details of monomer</summary>
		/// <returns>Details successesfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> MonomerDetailAsync(string polymertype, string symbol, System.Threading.CancellationToken cancellationToken)
		{
			if (polymertype == null)
				throw new System.ArgumentNullException("polymertype");

			if (symbol == null)
				throw new System.ArgumentNullException("symbol");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/monomer/{polymertype}/{symbol}");
			urlBuilder_.Replace("{polymertype}", System.Uri.EscapeDataString(ConvertToString(polymertype, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "404")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Monomer was not found", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Delete a Monomer</summary>
		/// <returns>Monomer successfully deleted</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task DeleteMonomerAsync(string polymertype, string symbol)
		{
			return DeleteMonomerAsync(polymertype, symbol, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Delete a Monomer</summary>
		/// <returns>Monomer successfully deleted</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteMonomerAsync(string polymertype, string symbol, System.Threading.CancellationToken cancellationToken)
		{
			if (polymertype == null)
				throw new System.ArgumentNullException("polymertype");

			if (symbol == null)
				throw new System.ArgumentNullException("symbol");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/monomer/{polymertype}/{symbol}");
			urlBuilder_.Replace("{polymertype}", System.Uri.EscapeDataString(ConvertToString(polymertype, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{symbol}", System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ == "404")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Monomer not found", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Show all rules</summary>
		/// <returns>List of rules generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ShowAllRulesAsync()
		{
			return ShowAllRulesAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Show all rules</summary>
		/// <returns>List of rules generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task ShowAllRulesAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rule");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Add rule</summary>
		/// <param name="body">Rule</param>
		/// <returns>Rule successesfully added</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task AddRuleAsync(string body)
		{
			return AddRuleAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Add rule</summary>
		/// <param name="body">Rule</param>
		/// <returns>Rule successesfully added</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task AddRuleAsync(string body, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rule");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Show rule</summary>
		/// <returns>Rule showed</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ShowRuleAsync(int id)
		{
			return ShowRuleAsync(id, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Show rule</summary>
		/// <returns>Rule showed</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task ShowRuleAsync(int id, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rule/{id}");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ == "404")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Rule not found", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Delete rule</summary>
		/// <returns>Rule successfully deleted</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task DeleteRuleAsync(int id)
		{
			return DeleteRuleAsync(id, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Delete rule</summary>
		/// <returns>Rule successfully deleted</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task DeleteRuleAsync(int id, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rule/{id}");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ == "404")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Rule not found", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value is System.Enum)
			{
				string name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
								as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value != null && value.GetType().IsArray)
			{
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			return System.Convert.ToString(value, cultureInfo);
		}
	}

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
