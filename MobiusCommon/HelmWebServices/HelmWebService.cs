using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

// October 2019
// This auto-generated file has been modified to return the result of the web request by changing the following:
//
// 1. public async System.Threading.Tasks.Task ===> public async System.Threading.Tasks.Task<string>
//
// 2. if (status_ == "200") { return; } 
//    ===>
//    if (status_ == "200")
//					{
//						string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//						return responseText_;
//					}
// 3. Adding return null to the end of each method

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Mobius.Helm
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0))")]
	public partial class HelmWebService
	{
		private string _baseUrl = "";
		private System.Net.Http.HttpClient _httpClient;
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public HelmWebService(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings();
				UpdateJsonSerializerSettings(settings);
				return settings;
			});
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <summary>Calculates the extinction coefficient of a non-ambiguous  HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Extinction coefficient was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateExtinctionCoefficientPostAsync(string hELMNotation)
		{
			return CalculateExtinctionCoefficientPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the extinction coefficient of a non-ambiguous  HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Extinction coefficient was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateExtinctionCoefficientPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/ExtinctionCoefficient");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the extinction coefficient of a non-ambiguous  HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Extinction coefficient was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateExtinctionCoefficientAsync(string c)
		{
			return CalculateExtinctionCoefficientAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the extinction coefficient of a non-ambiguous  HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Extinction coefficient was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateExtinctionCoefficientAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/ExtinctionCoefficient/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string and takes natural analogs ofmodified monomers into account</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Fingerprint natural analogs of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateFingerprintNaturalAnalogsPutAsync(string hELMNotation)
		{
			return CalculateFingerprintNaturalAnalogsPutAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string and takes natural analogs ofmodified monomers into account</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Fingerprint natural analogs of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateFingerprintNaturalAnalogsPutAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Fingerprints/naturalAnalogs");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string and takes natural analogs ofmodified monomers into account</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Fingerprint natural analogs of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateFingerprintNaturalAnalogsAsync(string c)
		{
			return CalculateFingerprintNaturalAnalogsAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string and takes natural analogs ofmodified monomers into account</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Fingerprint natural analogs of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateFingerprintNaturalAnalogsAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Fingerprints/naturalAnalogs/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Fingerprint of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateFingerprintPutAsync(string hELMNotation)
		{
			return CalculateFingerprintPutAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Fingerprint of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateFingerprintPutAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Fingerprints/original");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Fingerprint of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateFingerprintAsync(string c)
		{
			return CalculateFingerprintAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates a hashed fingerprint of a non-ambiguous HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Fingerprint of HELM input was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateFingerprintAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Fingerprints/original/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the molecular formula of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Molecular Formula was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateMolecularFormulaPostAsync(string hELMNotation)
		{
			return CalculateMolecularFormulaPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the molecular formula of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Molecular Formula was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateMolecularFormulaPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/MolecularFormula");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the molecular formula of a non-ambiguous  HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Moleuclar formula was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateMolecularFormulaAsync(string c)
		{
			return CalculateMolecularFormulaAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the molecular formula of a non-ambiguous  HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Moleuclar formula was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateMolecularFormulaAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/MolecularFormula/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the molecular weight of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Molecular weight was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateMolecularWeightPostAsync(string hELMNotation)
		{
			return CalculateMolecularWeightPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the molecular weight of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Molecular weight was successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateMolecularWeightPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/MolecularWeight");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the molecular weight of a non-ambiguous HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Molecular weight was successfully calculated from HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateMolecularWeightAsync(string c)
		{
			return CalculateMolecularWeightAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the molecular weight of a non-ambiguous HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Molecular weight was successfully calculated from HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateMolecularWeightAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/MolecularWeight/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates molecule properties of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Molecule properties were successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> CalculateCombinedPostAsync(string hELMNotation)
		{
			return CalculateCombinedPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates molecule properties of a non-ambiguous HELM string</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Molecule properties were successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateCombinedPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/MoleculeProperties");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}

			finally
			{
			}

			return null;
		}

		/// <summary>Calculates the extinction coefficient of a non-ambiguous HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>MoleculeProperties were successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> CalculateCombinedAsync(string c)
		{
			return CalculateCombinedAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the extinction coefficient of a non-ambiguous HELM string</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>MoleculeProperties were successfully calculated from the HELM input</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateCombinedAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/MoleculeProperties/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the similarity of two HELM notations with natural analogs taken into account</summary>
		/// <param name="hELMNotation1">HELMNotation1</param>
		/// <param name="hELMNotation2">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateSimilarityNaturalAnalogsPutAsync(string hELMNotation1, string hELMNotation2)
		{
			return CalculateSimilarityNaturalAnalogsPutAsync(hELMNotation1, hELMNotation2, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the similarity of two HELM notations with natural analogs taken into account</summary>
		/// <param name="hELMNotation1">HELMNotation1</param>
		/// <param name="hELMNotation2">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateSimilarityNaturalAnalogsPutAsync(string hELMNotation1, string hELMNotation2, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Similarity/naturalAnalogs");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation1 == null)
						throw new System.ArgumentNullException("hELMNotation1");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation1", ConvertToString(hELMNotation1, System.Globalization.CultureInfo.InvariantCulture)));
					if (hELMNotation2 == null)
						throw new System.ArgumentNullException("hELMNotation2");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation2", ConvertToString(hELMNotation2, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the similarity of two HELM notations with natural analogs taken into account</summary>
		/// <param name="c">HELMNotation1</param>
		/// <param name="v">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateSimilarityNaturalAnalogsAsync(string c, string v)
		{
			return CalculateSimilarityNaturalAnalogsAsync(c, v, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the similarity of two HELM notations with natural analogs taken into account</summary>
		/// <param name="c">HELMNotation1</param>
		/// <param name="v">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateSimilarityNaturalAnalogsAsync(string c, string v, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			if (v == null)
				throw new System.ArgumentNullException("v");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Similarity/naturalAnalogs/{c}/{v}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{v}", System.Uri.EscapeDataString(ConvertToString(v, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the similarity of two HELM notations</summary>
		/// <param name="hELMNotation1">HELMNotation1</param>
		/// <param name="hELMNotation2">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateSimilarityPutAsync(string hELMNotation1, string hELMNotation2)
		{
			return CalculateSimilarityPutAsync(hELMNotation1, hELMNotation2, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the similarity of two HELM notations</summary>
		/// <param name="hELMNotation1">HELMNotation1</param>
		/// <param name="hELMNotation2">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateSimilarityPutAsync(string hELMNotation1, string hELMNotation2, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Similarity/original");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation1 == null)
						throw new System.ArgumentNullException("hELMNotation1");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation1", ConvertToString(hELMNotation1, System.Globalization.CultureInfo.InvariantCulture)));
					if (hELMNotation2 == null)
						throw new System.ArgumentNullException("hELMNotation2");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation2", ConvertToString(hELMNotation2, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Calculates the similarity of two HELM notations</summary>
		/// <param name="c">HELMNotation1</param>
		/// <param name="v">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CalculateSimilarityAsync(string c, string v)
		{
			return CalculateSimilarityAsync(c, v, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Calculates the similarity of two HELM notations</summary>
		/// <param name="c">HELMNotation1</param>
		/// <param name="v">HELMNotation2</param>
		/// <returns>Similarity was successfully calculated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CalculateSimilarityAsync(string c, string v, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			if (v == null)
				throw new System.ArgumentNullException("v");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Similarity/original/{c}/{v}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{v}", System.Uri.EscapeDataString(ConvertToString(v, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Checks if a parent notation is a substructure of a child notationmodified monomers into account</summary>
		/// <param name="parentNotation">parent notation</param>
		/// <param name="childNotation">child notation</param>
		/// <returns>HELM substructure relationship was successfully calculated.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CheckSubstructureRelationshipPutAsync(string parentNotation, string childNotation)
		{
			return CheckSubstructureRelationshipPutAsync(parentNotation, childNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Checks if a parent notation is a substructure of a child notationmodified monomers into account</summary>
		/// <param name="parentNotation">parent notation</param>
		/// <param name="childNotation">child notation</param>
		/// <returns>HELM substructure relationship was successfully calculated.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CheckSubstructureRelationshipPutAsync(string parentNotation, string childNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Substructure");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (parentNotation == null)
						throw new System.ArgumentNullException("parentNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("parentNotation", ConvertToString(parentNotation, System.Globalization.CultureInfo.InvariantCulture)));
					if (childNotation == null)
						throw new System.ArgumentNullException("childNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("childNotation", ConvertToString(childNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Checks if a parent notation is a substructure of a child notationmodified monomers into account</summary>
		/// <param name="c">parent notation</param>
		/// <param name="v">child notation</param>
		/// <returns>HELM substructure relationship was successfully calculated.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CheckSubstructureRelationshipAsync(string c, string v)
		{
			return CheckSubstructureRelationshipAsync(c, v, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Checks if a parent notation is a substructure of a child notationmodified monomers into account</summary>
		/// <param name="c">parent notation</param>
		/// <param name="v">child notation</param>
		/// <returns>HELM substructure relationship was successfully calculated.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CheckSubstructureRelationshipAsync(string c, string v, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			if (v == null)
				throw new System.ArgumentNullException("v");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Calculation/Substructure/{c}/{v}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{v}", System.Uri.EscapeDataString(ConvertToString(v, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts HELM Input into canonical HELM</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into canonical HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ConvertHELMCanonicalPostAsync(string hELMNotation)
		{
			return ConvertHELMCanonicalPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts HELM Input into canonical HELM</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into canonical HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertHELMCanonicalPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Conversion/Canonical");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts HELM Input into canonical HELM</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into canonical HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ConvertHELMCanonicalAsync(string c)
		{
			return ConvertHELMCanonicalAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts HELM Input into canonical HELM</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into canonical HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertHELMCanonicalAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Conversion/Canonical/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts HELM Input into JSON-Output</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>JSON-Output was successfully generated from the HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task CreateJSONAsync(string hELMNotation)
		{
			return CreateJSONAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts HELM Input into JSON-Output</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>JSON-Output was successfully generated from the HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> CreateJSONAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Conversion/JSON");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts SMILES input into Molfile</summary>
		/// <param name="sMILES">SMILES</param>
		/// <returns>SMILES was successfully converted into Molfile</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ConvertMolfilePostAsync(string sMILES)
		{
			return ConvertMolfilePostAsync(sMILES, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts SMILES input into Molfile</summary>
		/// <param name="sMILES">SMILES</param>
		/// <returns>SMILES was successfully converted into Molfile</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertMolfilePostAsync(string sMILES, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Conversion/Molfile");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (sMILES == null)
						throw new System.ArgumentNullException("sMILES");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("SMILES", ConvertToString(sMILES, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in SMILES input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts SMILES input into Molfile</summary>
		/// <param name="smiles">SMILES</param>
		/// <returns>SMILES was successfully converted into Molfile</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ConvertMolfileAsync(string smiles)
		{
			return ConvertMolfileAsync(smiles, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts SMILES input into Molfile</summary>
		/// <param name="smiles">SMILES</param>
		/// <returns>SMILES was successfully converted into Molfile</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertMolfileAsync(string smiles, System.Threading.CancellationToken cancellationToken)
		{
			if (smiles == null)
				throw new System.ArgumentNullException("smiles");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Conversion/Molfile/{smiles}");
			urlBuilder_.Replace("{smiles}", System.Uri.EscapeDataString(ConvertToString(smiles, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in SMILES input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts HELM Input into standard HELM</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into standard HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ConvertHELMStandardPostAsync(string hELMNotation)
		{
			return ConvertHELMStandardPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts HELM Input into standard HELM</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into standard HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertHELMStandardPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Conversion/Standard");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts HELM Input into standard HELM</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into standard HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ConvertHELMStandardAsync(string c)
		{
			return ConvertHELMStandardAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts HELM Input into standard HELM</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation was successfully converted into standard HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertHELMStandardAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Conversion/Standard/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HLEM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads HELMNotation and converts it into peptide analogue sequence</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Natural analogue peptide sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> ConvertIntoPEPTIDEAnalogSequencePostAsync(string hELMNotation)
		{
			return ConvertIntoPEPTIDEAnalogSequencePostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads HELMNotation and converts it into peptide analogue sequence</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Natural analogue peptide sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertIntoPEPTIDEAnalogSequencePostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Convert/PEPTIDE");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}

			return null;
		}

		/// <summary>Reads HELMNotation and converts it into peptide analogue sequence</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Natural analogue peptide sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ConvertIntoPEPTIDEAnalogSequenceAsync(string c)
		{
			return ConvertIntoPEPTIDEAnalogSequenceAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads HELMNotation and converts it into peptide analogue sequence</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Natural analogue peptide sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertIntoPEPTIDEAnalogSequenceAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Convert/PEPTIDE/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads HELMNotation and converts it into rna analogue sequence</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Natural analogue rna sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> ConvertIntoRNAAnalogSequencePostAsync(string hELMNotation)
		{
			return ConvertIntoRNAAnalogSequencePostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads HELMNotation and converts it into rna analogue sequence</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>Natural analogue rna sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertIntoRNAAnalogSequencePostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Convert/RNA");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads HELMNotation and converts it into rna analogue sequence</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Natural analogue rna sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> ConvertIntoRNAAnalogSequenceAsync(string c)
		{
			return ConvertIntoRNAAnalogSequenceAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads HELMNotation and converts it into rna analogue sequence</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>Natural analogue rna sequence was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ConvertIntoRNAAnalogSequenceAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Convert/RNA/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts HELM Input into Fasta</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>FastaFile was successfully generated from the HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> GenerateFastaPostAsync(string hELMNotation)
		{
			return GenerateFastaPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts HELM Input into Fasta</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>FastaFile was successfully generated from the HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateFastaPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Produce");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Converts HELM Input into Fasta</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>FastaFile was successfully generated from the HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> GenerateFastaAsync(string c)
		{
			return GenerateFastaAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Converts HELM Input into Fasta</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>FastaFile was successfully generated from the HELMNotation</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateFastaAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Produce/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads peptide Fasta-Sequence(s) and generates HELMNotation</summary>
		/// <param name="pEPTIDE">peptide</param>
		/// <param name="rNA">rna</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> GenerateHELMInputAsync(string pEPTIDE, string rNA)
		{
			return GenerateHELMInputAsync(pEPTIDE, rNA, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads peptide Fasta-Sequence(s) and generates HELMNotation</summary>
		/// <param name="pEPTIDE">peptide</param>
		/// <param name="rNA">rna</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateHELMInputAsync(string pEPTIDE, string rNA, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Read?");
			if (pEPTIDE != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("PEPTIDE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pEPTIDE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (rNA != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("RNA") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rNA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in sequence input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads peptide Fasta-Sequence(s) and generates HELMNotation</summary>
		/// <param name="pEPTIDE">peptide</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> GenerateHELMInputPostPEPTIDEAsync(string pEPTIDE)
		{
			return GenerateHELMInputPostPEPTIDEAsync(pEPTIDE, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads peptide Fasta-Sequence(s) and generates HELMNotation</summary>
		/// <param name="pEPTIDE">peptide</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateHELMInputPostPEPTIDEAsync(string pEPTIDE, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Read/PEPTIDE");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (pEPTIDE == null)
						throw new System.ArgumentNullException("pEPTIDE");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("PEPTIDE", ConvertToString(pEPTIDE, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in input peptide sequence", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads rna Fasta-Sequence(s) and generates HELMNotation</summary>
		/// <param name="rNA">rna</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<string> GenerateHELMInputPostRNAAsync(string rNA)
		{
			return GenerateHELMInputPostRNAAsync(rNA, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads rna Fasta-Sequence(s) and generates HELMNotation</summary>
		/// <param name="rNA">rna</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateHELMInputPostRNAAsync(string rNA, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Fasta/Read/RNA");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (rNA == null)
						throw new System.ArgumentNullException("rNA");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("RNA", ConvertToString(rNA, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in input rna sequence", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Image generation of the atom/bond representation of the HELM molecule</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateImageForHELMPostAsync(string hELMNotation)
		{
			return GenerateImageForHELMPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Image generation of the atom/bond representation of the HELM molecule</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateImageForHELMPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Image/HELM");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Image generation of the atom/bond representation of the HELM molecule</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<FileResponse> GenerateImageForHELMAsync(string c)
		{
			return GenerateImageForHELMAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Image generation of the atom/bond representation of the HELM molecule</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<FileResponse> GenerateImageForHELMAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Image/HELM/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/png"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200" || status_ == "206")
						{
							return default(FileResponse);
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(FileResponse);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{

			}
		}

		/// <summary>Image generation of the atom/bond representation of monomer</summary>
		/// <param name="monomerId">monomerId</param>
		/// <param name="polymerType">polymerType</param>
		/// <param name="showRgroups">showRgroups</param>
		/// <returns>Monomer image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<FileResponse> GenerateImageForMonomerAsync(string monomerId, string polymerType, bool? showRgroups)
		{
			return GenerateImageForMonomerAsync(monomerId, polymerType, showRgroups, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Image generation of the atom/bond representation of monomer</summary>
		/// <param name="monomerId">monomerId</param>
		/// <param name="polymerType">polymerType</param>
		/// <param name="showRgroups">showRgroups</param>
		/// <returns>Monomer image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<FileResponse> GenerateImageForMonomerAsync(string monomerId, string polymerType, bool? showRgroups, System.Threading.CancellationToken cancellationToken)
		{
			if (monomerId == null)
				throw new System.ArgumentNullException("monomerId");

			if (polymerType == null)
				throw new System.ArgumentNullException("polymerType");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Image/Monomer?");
			urlBuilder_.Append(System.Uri.EscapeDataString("monomerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(monomerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Append(System.Uri.EscapeDataString("polymerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polymerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (showRgroups != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("showRgroups") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showRgroups, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/png"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200" || status_ == "206")
						{
							return default(FileResponse);
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error ininput", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(FileResponse);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Image generation of the atom/bond representation of monomer</summary>
		/// <param name="monomerId">monomerId</param>
		/// <param name="polymerType">polymerType</param>
		/// <returns>Monomer image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateImageForMonomerPostAsync(string monomerId, string polymerType, bool? showRgroups)
		{
			return GenerateImageForMonomerPostAsync(monomerId, polymerType, showRgroups, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Image generation of the atom/bond representation of monomer</summary>
		/// <param name="monomerId">monomerId</param>
		/// <param name="polymerType">polymerType</param>
		/// <returns>Monomer image was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateImageForMonomerPostAsync(string monomerId, string polymerType, bool? showRgroups, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Image/Monomer");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (monomerId == null)
						throw new System.ArgumentNullException("monomerId");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("monomerId", ConvertToString(monomerId, System.Globalization.CultureInfo.InvariantCulture)));
					if (polymerType == null)
						throw new System.ArgumentNullException("polymerType");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("polymerType", ConvertToString(polymerType, System.Globalization.CultureInfo.InvariantCulture)));
					if (showRgroups != null)
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("showRgroups", ConvertToString(showRgroups, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Refresh the monomers in the current monomer database.</summary>
		/// <returns>Monomer cache was refreshed</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task RefreshMonomerCacheAsync()
		{
			return RefreshMonomerCacheAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Refresh the monomers in the current monomer database.</summary>
		/// <returns>Monomer cache was refreshed</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> RefreshMonomerCacheAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Refresh");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Monomer cache was not refreshed", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>SMILES generation for  the whole HELM molecule</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateSMILESForHELMPostAsync(string hELMNotation)
		{
			return GenerateSMILESForHELMPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>SMILES generation for  the whole HELM molecule</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateSMILESForHELMPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SMILES");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Canonical SMILES generation for  the whole HELM molecule</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateCanSMILESForHELMPostAsync(string hELMNotation)
		{
			return GenerateCanSMILESForHELMPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Canonical SMILES generation for  the whole HELM molecule</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateCanSMILESForHELMPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SMILES/Canonical");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Canonical SMILES generation for the whole HELM molecule</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateCanSMILESForHELMAsync(string c)
		{
			return GenerateCanSMILESForHELMAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Canonical SMILES generation for the whole HELM molecule</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateCanSMILESForHELMAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SMILES/Canonical/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>SMILES generation for the whole HELM molecule</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateSMILESForHELMAsync(string c)
		{
			return GenerateSMILESForHELMAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>SMILES generation for the whole HELM molecule</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>SMILES was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateSMILESForHELMAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SMILES/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in HELM input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads peptide sequence and generates HELMNotation</summary>
		/// <param name="c">peptide</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateHELMPeptideAsync(string c)
		{
			return GenerateHELMPeptideAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads peptide sequence and generates HELMNotation</summary>
		/// <param name="c">peptide</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateHELMPeptideAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Sequence/PEPTIDE/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in peptide sequence input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Reads rna sequence and generates HELMNotation</summary>
		/// <param name="c">rna</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GenerateHELMRNAAsync(string c)
		{
			return GenerateHELMRNAAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Reads rna sequence and generates HELMNotation</summary>
		/// <param name="c">rna</param>
		/// <returns>HELMNotation was successfully generated</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GenerateHELMRNAAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Sequence/RNA/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Error in rna sequence input", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Check for conformance to the specification &amp; availability of monomers in the current monomer database.</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ValidateInputHELMPostAsync(string hELMNotation)
		{
			return ValidateInputHELMPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Check for conformance to the specification &amp; availability of monomers in the current monomer database.</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ValidateInputHELMPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Validation");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("HELMNotation is not valid", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Check for conformance to the specification.</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ValidateSyntaxInputHELMPostAsync(string hELMNotation)
		{
			return ValidateSyntaxInputHELMPostAsync(hELMNotation, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Check for conformance to the specification.</summary>
		/// <param name="hELMNotation">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ValidateSyntaxInputHELMPostAsync(string hELMNotation, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Validation/Syntax");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
					if (hELMNotation == null)
						throw new System.ArgumentNullException("hELMNotation");
					else
						keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("HELMNotation", ConvertToString(hELMNotation, System.Globalization.CultureInfo.InvariantCulture)));
					request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("HELMNotation is not valid", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Check for conformance to the specification. Be careful with special cases in the url</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ValidateSyntaxInputHELMAsync(string c)
		{
			return ValidateSyntaxInputHELMAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Check for conformance to the specification. Be careful with special cases in the url</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ValidateSyntaxInputHELMAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Validation/Syntax/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("HELMNotation is not valid", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Check for conformance to the specification &amp; availability of monomers in the current monomer database. Be careful with special cases in the url</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task ValidateInputHELMAsync(string c)
		{
			return ValidateInputHELMAsync(c, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Check for conformance to the specification &amp; availability of monomers in the current monomer database. Be careful with special cases in the url</summary>
		/// <param name="c">HELMNotation</param>
		/// <returns>HELMNotation is valid</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> ValidateInputHELMAsync(string c, System.Threading.CancellationToken cancellationToken)
		{
			if (c == null)
				throw new System.ArgumentNullException("c");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Validation/{c}");
			urlBuilder_.Replace("{c}", System.Uri.EscapeDataString(ConvertToString(c, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("HELMNotation is not valid", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		/// <summary>Get version number.</summary>
		/// <returns>Call successful</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task GetVersionAsync()
		{
			return GetVersionAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Get version number.</summary>
		/// <returns>Call successful</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<string> GetVersionAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Version");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							return responseText_;
						}
						else
						if (status_ == "400")
						{
							string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("Call unsuccessful", (int)response_.StatusCode, responseText_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
			return null;
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value is System.Enum)
			{
				string name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
								as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value != null && value.GetType().IsArray)
			{
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			return System.Convert.ToString(value, cultureInfo);
		}
	}



	public partial class FileResponse : System.IDisposable
	{
		private System.IDisposable _client;
		private System.IDisposable _response;

		public int StatusCode { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public System.IO.Stream Stream { get; private set; }

		public bool IsPartial
		{
			get { return StatusCode == 206; }
		}

		public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
		{
			StatusCode = statusCode;
			Headers = headers;
			Stream = stream;
			_client = client;
			_response = response;
		}

		public void Dispose()
		{
			if (Stream != null)
				Stream.Dispose();
			if (_response != null)
				_response.Dispose();
			if (_client != null)
				_client.Dispose();
		}
	}

#if false // this is a duplicate
	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0))")]
	public partial class ApiException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
				: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0))")]
	public partial class ApiException<TResult> : ApiException
	{
		public TResult Result { get; private set; }

		public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
				: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}
#endif

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
