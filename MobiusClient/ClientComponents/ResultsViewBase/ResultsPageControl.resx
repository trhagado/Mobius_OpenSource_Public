<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Bitmaps16x16.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>207, 17</value>
  </metadata>
  <data name="Bitmaps16x16.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAA+
        CwAAAk1TRnQBSQFMAgEBCAEAATwBAAE8AQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABMAMAAQEBAAEYBgABJP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AB4AIZljAAGaAWwBOgGaAWwBOgGa
        AWwBOjMAA5kM4AOZDPUDmVEAASUBrwGJASUBrwGJASUBrwGJCQABmgFsAToBmgFsAToBmgFsATozAAOZ
        DOADmQz1A5lRAAEmAa8BigElAa8BiQElAa8BiQkAAZoBbAE6AZoBbAE6AZoBbAE6CQAkhAYAA5kM4B6Z
        RQABJQGvAYkBJQGvAYkBJQGvAYkbAAOEHv8DhAYAA5kn9QOZFQADcANAAQABCEwAA4QD/wHVAcwBxwHl
        Ad8B2wHgAdgB0QGjAX0BYAG+AaQBkQHzAfAB7gHyAe4B7AH1AfIB8QP/A4QGAAOZGPUP9wOZFQADcANQ
        ARABCAEQGwAGZgMABmYDAAZmAwAGZg8AA4QD/wHcAdUB0AHuAegB4wGpAYYBawGXAWwBSwGZAW4BTgHr
        AeIB2gH6AfcB8wHxAe0B6wP/A4QGAAOZGPUP+AOZFQAGcANAGAADZjAAA4QD/wHbAdQBzwHMAbkBqgGX
        AWwBSwGnAYIBZgGXAWwBSwG5AZsBhAH4AfQB8QHtAeoB5wP/A4QGAAOZJ/kDmRUAA3ABkAGYAZABUAFI
        AVAYAANmEAABgAIAAYACAAGABwADZg8AA4QD/wHXAdAByQGfAXcBWQGrAYgBbgHiAdgBzwGaAXABUAGY
        AW4BTQHjAdcBzQHtAekB5gP/A4QGAAOZEvsS+QP7A5kSAAGvAc0B1QOQAdAByAHAAVABWAFQAZcBrwG9
        KAABgAIAAYACAAGABwADZg8AA4QD/wHVAc4ByAHSAcMBuAHgAdgB0QHqAeQB4AG+AaQBkAGXAWwBSwGy
        AZIBeQHrAegB5QP/A4QGAAOZFfwP+QP8A5kPAAGyAdAB3AGAAYgBgAPwAeAB2AHQAZABmAGQAUABSAFA
        AaUBxgHTEgADZhAAAYACAAGAAgABgBkAA4QD/wHMAcMBvAHgAdsB2AHiAd0B2QHiAdsB1gHkAdwB1QGd
        AXUBVgGXAWwBSwHUAcYBuwP/A4QGAAOZEv0S+QP9A5kMAAG5AdgB5wNwAfAB6AHwAf8B+AH/AfAB6AHg
        A9ADcAFAAUgBQAGsAdAB3g8AA2YEAAGAAgABgAIAAYATAANmDwADhAP/AbkBrAGiAdcB0QHLAdUBzwHK
        AdgB0gHMAeYB4QHdAcIBrAGaAZcBbAFLAa8BjwF3A/8DhAYAA5kV/g/5A/4DmQkAAbcB0wHhA3ABwAHI
        AcAD/wHwAfgE8AHQAdgB0AGwAagBsANgAUABSAFAAaUBxgHTEwABgAIAAYACAAGACAABgAIAAYACAAGA
        BAADZg8AA4QD/wG7Aa8BpQG5AawBogG7Aa8BpQG/AbMBqgHNAcQBvAHYAc8ByQG9AaYBlQHeAdYB0AP/
        A4QGAAOZJ/8DmQkAAcABuATAAdAByAHQA8ABsAG4B7ADoAOAA2ABQAFIAUAMAANmBAABgAIAAYACAAGA
        CAABgAIAAYACAAGAFgADhB7/A4QGAAOZAaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9
        AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9A5k2AANmEwABgAIAAYACAAGA
        BAADZg8AJIQGAC2ZVwADZpwABmYDAAZmAwAGZgMABmZsAC2ZAwAtmQMALZkzAAOZJ/IDmQMAA5kS8gOZ
        EvIDmQMAA5kS8gOZEvIDmQYAG5kSAAOZJ/MDmQMAA5kS8wOZEvMDmQMAA5kS8wOZEvMDmQYAA5kS8gP0
        A5kSAAOZJ/QDmQMAA5kS9AOZEvQDmQMAA5kS9AOZEvQDmQYAA5kS8wP0CZkMAAOZJ/UDmQMAA5kS9QOZ
        EvUDmQMAA5kS9QOZEvUDmQYAA5kV9AOZA/QDmQwAA5kn9wOZAwADmRL3A5kS9wOZAwADmRL3A5kS9wOZ
        BgADmRL1A/QDmQP0CZkGAAOZAaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9
        AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9A5kDAAOZEvgDmRL4A5kDAAOZAaMBcgE9
        AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9A5kBowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFy
        AT0BowFyAT0DmQYAA5kS9wP0A5kD9AOZA/QDmQYALZkDAAOZEvkDmRL5A5kDAC2ZBgADmQGjAXIBPQGj
        AXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQOZA/QDmQP0A5kGAAOZJ/sDmQMAA5kS+wOZ
        EvsDmQMAA5kS+wOZEvsDmQYAG5kD9AOZA/QDmQYAA5kn/AOZAwADmRL8A5kS/AOZAwADmRL8A5kS/AOZ
        DAADmQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQOZA/QDmQYAA5kn/QOZ
        AwADmRL9A5kS/QOZAwADmRL9A5kS/QOZDAAbmQP0A5kGAAOZJ/4DmQMAA5kS/gOZEv4DmQMAA5kS/gOZ
        Ev4DmRIAA5kBowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0DmQYAA5kn/wOZ
        AwADmRL/A5kS/wOZAwADmRL/A5kS/wOZEgAbmQYAA5kBowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFy
        AT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0DmQMAA5kBowFy
        AT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0BowFyAT0DmQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGj
        AXIBPQGjAXIBPQOZAwADmQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQGjAXIBPQOZAaMBcgE9
        AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9AaMBcgE9A5kzAC2ZAwAtmQMALZnDAAFCAU0BPgcAAT4DAAEo
        AwABQAMAATADAAEBAQABAQUAAYABARYAA/+CAAEfA/8B8QL/AQABHwL/AfwBcQL/AQABHwL/AfwBcQHA
        AQMBAAEBAv8B/AF/AcABAwEAAQEB/AF/Av8BwAEDAQABAQH8AX8ByQEnAcABAwEAAQEB/AF/Ab8B/wHA
        AQMBAAEBAfwBfwG+ATcBwAEDAQABAQH4AT8B/gE3AcABAwEAAQEB8AEfAb4BPwHAAQMBAAEBAeABDwGj
        AfcBwAEDAQABAQHAAQcB4wEXAcABAwEAAQEBwAEHAaMBHwHAAQMBAAEBAv8BvwEXAcABAwEAAQED/wH3
        Bv8BkgFPBP8BAAEBAQABAQEAAQEC/wEAAQEBAAEBAQABAQGAAT8BAAEBAQABAQEAAQEBgAE/AQABAQEA
        AQEBAAEBAYABDwEAAQEBAAEBAQABAQGAAQ8BAAEBAQABAQEAAQEBgAEDAQABAQEAAQEBAAEBAYABAwEA
        AQEBAAEBAQABAQGAAQMBAAEBAQABAQEAAQEBgAEDAQABAQEAAQEBAAEBAeABAwEAAQEBAAEBAQABAQHg
        AQMBAAEBAQABAQEAAQEB+AEDAQABAQEAAQEBAAEBAfgBAwEAAQEBAAEBAQABAQL/AQABAQEAAQEBAAEB
        CP8L
</value>
  </data>
</root>