<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Bitmaps16x16.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="Bitmaps16x16.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAA
        FgAAAk1TRnQBSQFMAgEBBQEAAYwBAQGMAQEBEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEYBgABGBgAAfkB+AH2AfkB+AH2AfkB+AH2AfkB+AH2AfkB+AH2AfkB+AH2AfkB+AH2
        AfkB+AH2AfkB+AH2AfkB+AH2AfkB+AH2AfkB+AH2nAAB0AF1ARMB2wGSAUMB2wGSAUMB2wGSAUMB2wGS
        AUMB2wGSAUMB2wGSAUMB2wGSAUMB2wGSAUMB2wGSAUMB2wGSAUMB0AF1AROcAAHTAXcBFgH/Ae4B1gH/
        Ae4B1gH/Ae4B1gH/Ae4B1gH/Ae4B1gH/Ae4B1gH/Ae4B1gH/Ae4B1gH/Ae4B1gH/Ae4B1gHTAXcBFpwA
        AdcBewEZAf8B8QHdAesBtgGFAesBtgGFAesBtQGEAesBtQGEAesBtAGCAesBtAGCAesBtAGCAesBswGB
        Af8B8QHdAdcBewEZnAAB2gF+ARwB/wHzAeIB2wGFAToB8AHNAbEB8AHNAbAB8AHNAbAB8AHMAa8B8AHM
        Aa8B8AHMAa8B2wF/AS8B/wHzAeIB2gF+ARycAAHdAYEBHwH/AfYB6AHjAZUBTwHsAbIBfQHsAbABeQHs
        AbABeQHsAa8BdgHsAa0BcwHsAa0BcwHjAY0BPgH/AfYB6AHdAYEBH5wAAeEBhQEjAf8B+AHtAd8BjAFD
        AfwB8QHpAfwB8QHoAfwB8QHoAfwB8QHnAfwB8QHnAfwB8QHnAd8BhQE1Af8B+AHtAeEBhQEjnAAB5AGI
        ASYB/wH6AfIB5QGZAVQB5QGYAVIB5QGWAU0B5QGWAU0B5QGUAUkB5QGSAUUB5QGSAUUB5QGQAUIB/wH6
        AfIB5AGIASacAAHnAYsBKgH/AfsB9gHfAYwBQwH8AfEB6QH8AfEB6AH8AfEB6AH8AfEB5wH8AfEB5wH8
        AfEB5wHfAYUBNQH/AfsB9gHnAYsBKpwAAesBjwEtAf8B/QH6AeMBlQFPAewBsgF9AewBsAF5AewBsAF5
        AewBrwF2AewBrQFzAewBrQFzAeMBjQE+Af8B/QH6AesBjwEtnAAB7gGSAS8B/wL+AeEBkAFIAfUB2AG+
        AfUB1wG8AfUB1wG8AfUB1gG6AfUB1gG5AfUB1gG5AeEBiAE5Af8C/gHuAZIBL5wAAfIBlQEzAf8C/gHy
        AcwBqQHyAcsBqAHyAcoBpgHyAcoBpgHyAckBpAHyAcgBogHyAcgBogHyAccBoAH/Av4B8gGVATOcAAHf
        AYMBJgHiAakBcQHhAagBcQHgAacBcAHfAaUBbwHdAaQBbgHcAaIBbgHbAaEBbQHaAaABbAHYAZ4BawHX
        AZ0BawHRAXQBHpwAAd8BigE1AeQBiAEpAeMBiAEpAeMBhwEoAeIBhwEoAeIBhgEoAeEBhQEoAeEBhQEn
        AeABhAEnAeABhAEnAe8B1wHDAcgBcwEonAAB9QG1AXIB9QG1AXAB9QG1AXAB9QG1AXAB9QG1AXAB9QG1
        AXAB9QG1AXAB9QG1AXAB9QG1AXAB9QG1AXAB+AHDAYoB8gGyAXD/APYAAfAB4QHWAYwBcwFgAYgBbQFb
        AaoBlgGIAe8B4AHVAf0B7QHhDwABXwGNAccBKgFuAcQBKAFrAcIBJQFoAb4BIwFlAb0BIQFjAbsBxAGJ
        AUcBxAGHAUcBwwGGAUQBwgGEAUMBwgGDAUEBwQGDAUABwQGDAUABwQGDAUABwQGDAUABywGaAWcB0QGm
        AXYByQGSAVQByAGPAVIBxwGOAU8BxwGMAU0BxgGLAUoBxAGJAUcBxAGHAUcBwwGGAUQBwgGEAUMBwgGD
        AUEBwQGDAUABwQGDAUABwQGDAUABwQGDAUABywGaAWcGAAH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/
        AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8BUAAe4B3wHUAY8BeAFn
        AdIBxwG+AY8BdAFfAaoBlgGIAfUB5gHaDwABMAF1AcoBowHeAfsBYAHFAfkBRAG3AfcBLwGtAfQBHQFm
        AbQC/AH7AfEB7gHrAfAB7QHqAe8B7QHnAcwBoAF4AvsB+gHtAeoB5QHtAegB4wHtAecB4gHBAYMBQAHL
        AZYBWQP/AfUB8wHxAfQB8gHwAfMB8gHuAdEBpgF/A/8B8QHuAesB8AHtAeoB7wHtAecBzAGgAXgD/wHt
        AeoB5QHtAegB4wHtAecB4gHBAYMBQAYAAf8B+AHwAbkBdgEtAbYBcwEpAbQBbwElAbABbQEkAa0BaAEf
        AasBZQEdAakBYwEbAacBYQEZAaUBXwEYAaQBXQEWAf8B+AHwFQAB7wHgAdUBkwF+AWwB9QHxAewBsgGT
        AXQBiAFtAVsB7gHfAdQPAAEzAXgBzQGjAd4B+wGeAdwB+wGNAdQB+gGAAc0B+AEgAWkBtwL8AfsC/AH7
        AfwC+wH8AvsBzQGhAXkB/AH7AfoC+wH6AfsB+gH5AfsB+gH5AcEBgwFAAc0BmAFcDP8B0gGnAYEM/wHN
        AaEBeQz/AcEBgwFABgAB/wH4AfAB5wHOAbYBuQF2AS4BtgFyASkB0gGxAZAB8QHiAdcB9QHmAdoB/wH4
        AfAB0gGwAY8BpwFgARkBpgFfARgB/wH4AfAVAAHxAeIB1wGXAYIBcwH1AfEB7AHAAZ8BfAGMAXMBYQHt
        Ad4B0w8AATUBewHQAToBggHPATYBfgHLATABeQHGASwBdQHBASYBbwG8AdIBpwGBAdEBpQF/AdABpQF9
        Ac8BowF8Ac4BogF6Ac4BoQF5Ac0BoAF4AcwBnwF2AcwBngF1AcEBgwFAAc4BmgFeAdUBrQGIAdUBrAGG
        AdQBqwGFAdQBqgGEAdIBqQGCAdIBpwGBAdEBpQF/AdABpQF9Ac8BowF8Ac4BogF6Ac4BoQF5Ac0BoAF4
        AcwBnwF2AcwBngF1AcEBgwFABgAB/wH4AfAB/AHsAeAB6AHPAbcBuQF2AS4BtwFzASoB2QG2AZUB+gHq
        Ad8B/wH4AfAB/wH4AfAB1AGxAZABpwFhARkB/wH4AfAVAAHxAeIB1wGaAYcBeAH1AfEB7AHBAaIBewGP
        AXgBZwHuAd8B1A8AATgBfgHTAaMB3gH7AWYByAH5AUwBvAH3ATUBsAH1ASsBdAHBAf0C/AHzAfAB7gHy
        Ae8B7QHxAe8B6wHPAaMBfAH8AfsB+gHvAewB6AHuAesB5gHuAeoB5QHBAYMBQAHOAZsBYQP/AfcB9gH0
        AfcB9QHzAfUB9AHxAdQBqQGEA/8B8wHwAe4B8gHvAe0B8QHvAesBzwGjAXwD/wHvAewB6AHuAesB5gHu
        AeoB5QHBAYMBQAYAAf8B+AHwAf8B+AHwAfwB7AHgAegBzwG3AbkBdgEuAbYBcwEpAdgBtgGUAfoB6gHf
        Af8B+AHwAf8B+AHwAf8B+AHwAf8B+AHwEgAB/QHtAeEB4gHTAcgBiwF5AWwBhQFzAWUBfQFmAVMBfwFp
        AVkB2gHKAb8B/AHsAeAMAAE7AYIB1gGjAd4B+wGhAd0B+wGSAdcB+gGDAc8B+QExAXkBxgH9AvwB/QT8
        AfsC/AH7AdABpQF9AfwC+wH8AfsB+gL7AfoC+wH6AcEBggFBAc8BnQFjDP8B1AGrAYUM/wHQAaUBfQz/
        AcEBggFBBgAB/wH4AfAB/wH4AfAB/wH4AfAB/AHsAeAB6AHPAbcBuQF3AS4BtgFzASkB2AG2AZQB+gHq
        Ad8B/wH4AfAB/wH4AfAB/wH4AfAPAAH+Ae4B4gH2AecB2wGWAYMBdwGeAY4BhAG3AaoBogGKAXIBXgF1
        AVwBSgGAAWoBWwHxAeIB1wH9Ae0B4QkAAT0BhQHYAUgBkAHbAUUBjAHYAUABiAHUATwBhAHRATYBfwHL
        AdQBqgGFAdMBqQGEAdMBqAGCAdEBpwGAAdEBpgF/AdABpQF+Ac8BowF8Ac4BogF7Ac0BoQF5AcIBhAFD
        AdEBoAFlAdcBsAGMAdcBrwGKAdYBrwGKAdUBrQGIAdUBrAGHAdQBqgGFAdMBqQGEAdMBqAGCAdEBpwGA
        AdEBpgF/AdABpQF+Ac8BowF8Ac4BogF7Ac0BoQF5AcIBhAFDBgAB/wH4AfAB/wH4AfAB/wH4AfAB/wH4
        AfAB/AHsAeAB5wHOAbYBuQF2AS4BtwFzASkB4AHBAaIB/QHtAeEB/wH4AfAB/wH4AfAMAAH+Ae4B4gH5
        AekB3gG2AaUBmAG8AbABpwHiAd0B2gHEAboBswGYAYIBbgGQAXcBYQF6AWABTAGgAYwBfQH0AeUB2QH9
        Ae0B4QYAAUABiAHbAaMB3gH7AWoByQH5AVUBwAH3AT0BtAH2ATwBhAHQAv0B/AH1AfMB8QH0AfIB8AH0
        AfEB7gHSAacBgQL8AfsB8QHuAesB8QHtAeoB8AHtAegBwwGGAUUB0QGhAWgD/wH5AfgD9wH2AfcB9gH1
        AdYBrQGIA/8B9QHzAfEB9AHyAfAB9AHxAe4B0gGnAYED/wHxAe4B6wHxAe0B6gHwAe0B6AHDAYYBRQYA
        Af8B+AHwAf8B+AHwAf8B+AHwAf8B+AHwAfwB7AHgAegBzwG4AbwBewEyAbkBdgEuAeEBwgGjAf0B7QHh
        Af8B+AHwAf8B+AHwCQAB/gHuAeIB+gHqAd8BvAGqAZ0BwwG3Aa4B9gH1AfQB2AHRAcwBwQG2Aa4BnQGJ
        AXcBkAF3AWEBkAF3AWEBeQFeAUkBnwGKAXsB9QHmAdoB/gHuAeIDAAFBAYoB3QGjAd4B+wGjAd4B+wGY
        AdkB+gGJAdEB+QFAAYkB1AX9AfwB/QL8Af0C/AHSAagBggL8AfsC/AH7AfwC+wH8AvsBwwGHAUcB0gGk
        AWsM/wHXAa4Bigz/AdIBqAGCDP8BwwGHAUcGAAH/AfgB8AH/AfgB8AH/AfgB8AH9Ae0B4QHqAdIBugHC
        AYMBOQG/AX8BNgHeAb0BmwH7AesB3wH/AfgB8AH/AfgB8AH/AfgB8AkAAfsB6wHfAcEBsAGiAccBvAG0
        A/8B8gHvAe4BzwHHAcEBvQGyAaoBowGQAYABkAF3AWEBkAF3AWEBkAF3AWEBeQFeAUkBoAGLAXwB9gHn
        AdsDAAFCAYsB3gFRAZkB5AFPAZcB4wFMAZQB4AFJAZEB3QFFAY0B2AHWAa4BiQHVAa0BiAHVAasBhgHU
        AaoBhQHTAakBhAHTAagBggHRAacBgQHRAaYBfwHQAaUBfQHFAYkBSAE+AYYB2gFQAZcB4wFNAZYB4QFJ
        AZIB3gFFAY8B2gE/AYkB1wE6AYQB0gE1AX8BzgEvAXoBygEoAXUBxAEiAXABwAEbAWkBuwEWAWQBtgEQ
        AV8BswELAVsBrgEXAVUBrQYAAf8B+AHwAf8B+AHwAf0B7QHhAe0B1QG9AccBigFBAcQBhwE9AeEBwAGf
        AfsB6wHfAf8B+AHwAfwB7AHgAfoB6gHfAf8B+AHwCQABxgG1AakBzwHEAb0B8gHvAe0B6gHmAeIB4AHZ
        AdQB2QHRAcwB2QHRAcwB2QHQAckB0QHHAb8BxwG6AbABugGqAZ4BqwGYAYkBhwFvAVwBogGNAX0DAAFC
        AYsB3gGjAd4B+wFrAckB+QFdAcMB+AFEAbcB9gFIAZAB3AH+Av0B9wH2AfQB9wH1AfMB9gH0AfEB1AGq
        AYUB/QL8AfMB8QHuAfIB7wHtAfIB7gHsAcUBigFKAT8BiAHcAZoB2gH7AWkByQH5AWUByAH5AWABxAH5
        AUUBjwHbAYwB1QH6AU8BvgH3AUgBugH3AUMBtwH2ASgBdQHFAXgBywH4ATMBrwH1AS8BrQH0ASwBqwH0
        ARkBVwGxBgAB/wH4AfAB/QHtAeEB7wHYAb8BzAGRAUgByQGNAUQB5AHEAaIB/AHsAeAB/wH4AfAB+wHr
        At8BvgGcAbkBdwEtAf8B+AHwCQAB2gHRAckBwgG3Aa0BpwGVAYgBmAGCAXQBkAF5AWkBlQGBAXMBpgGV
        AYkBxAG3Aa4B0wHIAcEB1QHLAcQB1AHKAcIBzQHCAboBvQGvAaMBpwGSAYMDAAFCAYsB3gGjAd4B+wGj
        Ad4B+wGcAdsB+wGOAdQB+QFOAZUB4AH+Cv0B/AHVAawBhwH9AvwB/QT8AfsC/AH7AccBjAFNAUIBigHd
        AZoB2gH7AZoB2gH7AZkB2gH7AZYB2QH6AUoBkgHeAY8B1gH6AYsB1AH6AYYB0gH6AYEB0AH6AS4BegHK
        AXoBywH5AXcByQH4AXMByAH4AXEBxwH4ARwBXAGzBgAB/wH4AvAB2QHAAdABlwFPAc0BlQFMAeQBxAGj
        AfcB6AHcAfkB6QHeAfgB6AHdAeEBwQGfAb4BfwE2Ab0BewEyAf8B+AHwCQABpwGTAoUBbQFbAX8BZwFV
        AYUBbgFfAZMBgAFzAaoBnQGWAcQBvAG3AekB5gHjAfoC+QL9AfwG/wHPAcYBvgGEAWgBUwMAAXMBpAHg
        AUIBiwHeAUIBiwHeAUIBiwHeAUEBigHdAUABiQHcAdABoAFlAc8BngFjAc4BmwFgAc0BmgFeAcwBmAFc
        AcsBlgFZAcsBkwFWAckBkgFUAcgBkAFRAdMBpQJzAaQB4AFBAYsB3QFAAYkB3QE/AYcB2wE8AYQB2QE5
        AYMB1QE3AYAB1AE1AXwB0QExAXkBzQEuAXUBywEsAXIByAEpAW4BxgElAWoBwgEjAWYBvwEgAWMBugFX
        AYQBwwYAAf8B+AHwAdIBmwFUAdEBmgFSAdABmAFPAc0BlQFLAcwBkQFIAckBjgFEAccBigFBAcQBhwE+
        AcIBhAE5Ab8BfwE2Af8B+AHwCQAB1wHFAbgBogGOAX4BkQF8AW0BkgF/AXABoQGSAYgBtQGtAagBzQHJ
        AcYB8AHuAe0B8QHvAewB4gHbAdYBzAHBAbkBsgGhAZUBogGNAX0BxgGxAaJpAAH/AfgB8AH/AfgB8AH/
        AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AH/AfgB8AwA
        Ae8B3wHRAdYBxAG4AcEBrQGfAa0BmQGJAZoBhwF2AZEBfAFpAY4BegFmAZgBfwFuAaMBigF6AbMBngGP
        AcsBtwGpAegB1gHJxgABQgFNAT4HAAE+AwABKAMAAUADAAEgAwABAQEAAQEGAAEBFgAD/wEAAcABAwYA
        AcABAwYAAcABAwYAAcABAwYAAcABAwYAAcABAwYAAcABAwYAAcABAwYAAcABAwYAAcABAwYAAcABAwYA
        AcABAwYAAcABAwYAAcABAwYAAcABAwYAAv8GAAb/AfgBHwQAAcABAwH4AR8EAAHAAQMB+AEfBAABwAED
        AfgBHwQAAcABAwH4AR8EAAHAAQMB8AEPBAABwAEDAeABBwQAAcABAwHAAQMEAAHAAQMBgAEBBAABwAED
        AYABAQQAAcABAwGAAQEEAAHAAQMBgAEBBAABwAEDAYABAQQAAcABAwGAAQEE/wHAAQMBwAEDCP8L
</value>
  </data>
</root>